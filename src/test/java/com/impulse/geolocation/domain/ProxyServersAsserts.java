package com.impulse.geolocation.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProxyServersAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProxyServersAllPropertiesEquals(ProxyServers expected, ProxyServers actual) {
        assertProxyServersAutoGeneratedPropertiesEquals(expected, actual);
        assertProxyServersAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProxyServersAllUpdatablePropertiesEquals(ProxyServers expected, ProxyServers actual) {
        assertProxyServersUpdatableFieldsEquals(expected, actual);
        assertProxyServersUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProxyServersAutoGeneratedPropertiesEquals(ProxyServers expected, ProxyServers actual) {
        assertThat(expected)
            .as("Verify ProxyServers auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProxyServersUpdatableFieldsEquals(ProxyServers expected, ProxyServers actual) {
        assertThat(expected)
            .as("Verify ProxyServers relevant properties")
            .satisfies(e -> assertThat(e.getIpAddress()).as("check ipAddress").isEqualTo(actual.getIpAddress()))
            .satisfies(e -> assertThat(e.getPort()).as("check port").isEqualTo(actual.getPort()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getProtocol()).as("check protocol").isEqualTo(actual.getProtocol()))
            .satisfies(e -> assertThat(e.getAnonymity()).as("check anonymity").isEqualTo(actual.getAnonymity()))
            .satisfies(e -> assertThat(e.getOrganization()).as("check organization").isEqualTo(actual.getOrganization()))
            .satisfies(e -> assertThat(e.getSpeed()).as("check speed").isEqualTo(actual.getSpeed()))
            .satisfies(e -> assertThat(e.getResponseTime()).as("check responseTime").isEqualTo(actual.getResponseTime()))
            .satisfies(e -> assertThat(e.getSuccessCount()).as("check successCount").isEqualTo(actual.getSuccessCount()))
            .satisfies(e -> assertThat(e.getFailCount()).as("check failCount").isEqualTo(actual.getFailCount()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProxyServersUpdatableRelationshipsEquals(ProxyServers expected, ProxyServers actual) {}
}
